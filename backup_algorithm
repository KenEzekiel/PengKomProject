peta = [[1, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 1, 0],
        [1, 1, 1, 1, 1, 0],
        [1, 0, 0, 0, 1, 0],
        [1, 1, 1, 1, 1, 0]]

start_x = 0
start_y = 0
end_x = 4
end_y = 4


def valid(moves):
    i = start_y
    j = start_x
    for move in moves:
        if move == "U":
            i -= 1
        elif move == "D":
            i += 1
        elif move == "L":
            j -= 1
        elif move == "R":
            j += 1
        
    if not(0 <= i < len(peta) and 0 <= j < len(peta[0])):
        return False
    elif (peta[i][j] == 0):
        return False
    else: 
        return True

array_value = []
def findEnd(moves):
    i = start_y
    j = start_x
    value = 0
    for move in moves:
        if move == "U":
            i -= 1
        elif move == "D":
            i += 1
        elif move == "L":
            j -= 1
        elif move == "R":
            j += 1
        value += peta[i][j]
        array_value.append(value)
    if i == end_x and j == end_y:
        print("Found: " + moves)
        return True

    return False


# MAIN ALGORITHM

moves = []
add = moves
while not findEnd(add): 
    #print(add)
    for j in ["L", "R", "U", "D"]:
        put = []
        put.append(add)
        put.append(j)
        if valid(put):
            moves.append(j)
print(moves)

def h(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return abs(x1 - x2) + abs(y1 - y2)

def Algorithm(draw, grid, start, end):
    nodes = {
        'A' : (0,0),
        'B' : (7,6)
    }
    # F = G + H
    count = 0
    open_set = PriorityQueue()
    open_set.put((0, count, start)) # 0 is the f score
    came_from = {}
    g_score = {spot: float("inf") for row in grid for spot in row}
    g_score[start] = 0
    f_score = {spot: float("inf") for row in grid for spot in row}
    f_score[start] = h(nodes.A, nodes.B)

    open_set_hash = {start}

    while not open_set.empty():
        current = open_set.get()[2]
        open_set_hash.remove(current)

        if current == end:
            pass # make path
            return True
        for neighbor in current.neighbors:
            value = peta[1][0]
            temp_g_score = g_score[current] + value
            
            if temp_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g_score
                f_score[neighbor] = temp_g_score + 3 # nanti ganti 3 nya
                if neighbor not in open_set_hash:
                    count += 1
                    open_set.put((f_score, count, neighbor))
                    open_set_hash.add(neighbor)
                    neighbor.make_open() #bikin make open
        if current != start:
            current.make_closed()

    return False